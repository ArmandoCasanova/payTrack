"""Init clean loan management schema (no QR codes)

Revision ID: 50ce49c3a8b9
Revises: 
Create Date: 2025-10-03 07:00:47.078753

"""
from typing import Sequence, Union


from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '50ce49c3a8b9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('client_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('paternal_surname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('maternal_surname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('occupation', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('national_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('status', sa.Enum('active', 'inactive', 'pays_on_time', 'bad_debtor', name='clientstatus'), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('client_id')
    )
    op.create_table('suppliers',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('supplier_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('contact', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('folio', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('supplier_type', sa.Enum('service', 'product', 'maintenance', 'office', 'other', name='suppliertype'), nullable=False),
    sa.Column('status', sa.Enum('active', 'inactive', name='supplierstatus'), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tax_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('supplier_id')
    )
    op.create_table('users',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('role', sa.Enum('admin', 'employee', name='userrole'), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('paternal_surname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('maternal_surname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('national_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('salary', sa.Numeric(), nullable=True),
    sa.Column('status', sa.Enum('active', 'inactive', name='userstatus'), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('client_financial_history',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('history_id', sa.Uuid(), nullable=False),
    sa.Column('client_id', sa.Uuid(), nullable=False),
    sa.Column('current_debt', sa.Numeric(), nullable=False),
    sa.Column('active_loans_count', sa.Integer(), nullable=False),
    sa.Column('payment_delays_count', sa.Integer(), nullable=False),
    sa.Column('average_delay_days', sa.Integer(), nullable=False),
    sa.Column('total_loaned_amount', sa.Numeric(), nullable=False),
    sa.Column('total_paid_amount', sa.Numeric(), nullable=False),
    sa.Column('total_interest_paid', sa.Numeric(), nullable=False),
    sa.Column('completed_loans_count', sa.Integer(), nullable=False),
    sa.Column('defaulted_loans_count', sa.Integer(), nullable=False),
    sa.Column('credit_score', sa.Integer(), nullable=True),
    sa.Column('risk_level', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('first_loan_date', sa.DateTime(), nullable=True),
    sa.Column('last_payment_date', sa.DateTime(), nullable=True),
    sa.Column('last_update_date', sa.DateTime(), nullable=False),
    sa.Column('payment_consistency', sa.Float(), nullable=True),
    sa.Column('preferred_payment_method', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.client_id'], ),
    sa.PrimaryKeyConstraint('history_id')
    )
    op.create_table('daily_cutoff',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('cutoff_id', sa.Uuid(), nullable=False),
    sa.Column('cutoff_date', sa.Date(), nullable=False),
    sa.Column('responsible_id', sa.Uuid(), nullable=False),
    sa.Column('total_income', sa.Numeric(), nullable=False),
    sa.Column('total_expenses', sa.Numeric(), nullable=False),
    sa.Column('profit', sa.Numeric(), nullable=False),
    sa.Column('payments_received', sa.Numeric(), nullable=False),
    sa.Column('interest_collected', sa.Numeric(), nullable=False),
    sa.Column('late_fees_collected', sa.Numeric(), nullable=False),
    sa.Column('other_income', sa.Numeric(), nullable=False),
    sa.Column('operational_expenses', sa.Numeric(), nullable=False),
    sa.Column('salary_payments', sa.Numeric(), nullable=False),
    sa.Column('loan_disbursements', sa.Numeric(), nullable=False),
    sa.Column('other_expenses', sa.Numeric(), nullable=False),
    sa.Column('initial_cash', sa.Numeric(), nullable=False),
    sa.Column('final_cash', sa.Numeric(), nullable=False),
    sa.Column('cash_difference', sa.Numeric(), nullable=False),
    sa.Column('total_transactions', sa.Integer(), nullable=False),
    sa.Column('loans_granted', sa.Integer(), nullable=False),
    sa.Column('payments_collected', sa.Integer(), nullable=False),
    sa.Column('is_closed', sa.Boolean(), nullable=False),
    sa.Column('closure_time', sa.DateTime(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('discrepancies', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bank_deposits', sa.Numeric(), nullable=False),
    sa.Column('bank_withdrawals', sa.Numeric(), nullable=False),
    sa.Column('bank_balance', sa.Numeric(), nullable=True),
    sa.ForeignKeyConstraint(['responsible_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('cutoff_id')
    )
    op.create_table('expenses',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('expense_id', sa.Uuid(), nullable=False),
    sa.Column('responsible_id', sa.Uuid(), nullable=False),
    sa.Column('supplier_id', sa.Uuid(), nullable=True),
    sa.Column('expense_date', sa.Date(), nullable=False),
    sa.Column('payment_method', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('amount', sa.Numeric(), nullable=False),
    sa.Column('category', sa.Enum('office_supplies', 'maintenance', 'services', 'rent', 'utilities', 'salaries', 'marketing', 'travel', 'other', name='expensecategory'), nullable=False),
    sa.Column('status', sa.Enum('pending', 'approved', 'paid', 'rejected', name='expensestatus'), nullable=False),
    sa.Column('invoice_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('receipt_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['responsible_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.supplier_id'], ),
    sa.PrimaryKeyConstraint('expense_id')
    )
    op.create_table('files',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('file_id', sa.Uuid(), nullable=False),
    sa.Column('client_id', sa.Uuid(), nullable=False),
    sa.Column('file_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_type', sa.Enum('identification', 'income_proof', 'address_proof', 'contract', 'payment_receipt', 'other', name='filetype'), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('mime_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('uploaded_by', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.client_id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('file_id')
    )
    op.create_table('loans',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('loan_id', sa.Uuid(), nullable=False),
    sa.Column('client_id', sa.Uuid(), nullable=False),
    sa.Column('authorizer_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Numeric(), nullable=False),
    sa.Column('payment_count', sa.Integer(), nullable=False),
    sa.Column('interest_rate', sa.Numeric(), nullable=False),
    sa.Column('payment_start_date', sa.Date(), nullable=False),
    sa.Column('late_interest', sa.Numeric(), nullable=False),
    sa.Column('status', sa.Enum('active', 'completed', 'defaulted', 'cancelled', 'pending_approval', name='loanstatus'), nullable=False),
    sa.Column('total_amount', sa.Numeric(), nullable=True),
    sa.Column('remaining_amount', sa.Numeric(), nullable=True),
    sa.ForeignKeyConstraint(['authorizer_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['client_id'], ['clients.client_id'], ),
    sa.PrimaryKeyConstraint('loan_id')
    )
    op.create_table('payments',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('payment_id', sa.Uuid(), nullable=False),
    sa.Column('client_id', sa.Uuid(), nullable=False),
    sa.Column('responsible_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Numeric(), nullable=False),
    sa.Column('interest_amount', sa.Numeric(), nullable=False),
    sa.Column('payment_method', sa.Enum('cash', 'transfer', 'card', 'check', name='paymentmethod'), nullable=False),
    sa.Column('status', sa.Enum('paid', 'pending', 'overdue', 'partial', 'cancelled', name='paymentstatus'), nullable=False),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('payment_date', sa.DateTime(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('reference', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.client_id'], ),
    sa.ForeignKeyConstraint(['responsible_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('payment_id')
    )
    op.create_table('reports',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('report_id', sa.Uuid(), nullable=False),
    sa.Column('report_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('report_type', sa.Enum('daily_summary', 'monthly_summary', 'loan_report', 'payment_report', 'collection_report', 'financial_report', 'client_report', 'employee_performance', 'overdue_report', name='reporttype'), nullable=False),
    sa.Column('generator_user_id', sa.Uuid(), nullable=False),
    sa.Column('generation_date', sa.DateTime(), nullable=False),
    sa.Column('report_period_start', sa.DateTime(), nullable=True),
    sa.Column('report_period_end', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('generating', 'completed', 'failed', 'scheduled', name='reportstatus'), nullable=False),
    sa.Column('format', sa.Enum('pdf', 'excel', 'csv', 'json', name='reportformat'), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('filters_applied', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('total_records', sa.Integer(), nullable=True),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.Column('is_scheduled', sa.Boolean(), nullable=False),
    sa.Column('schedule_frequency', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['generator_user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('report_id')
    )
    op.create_table('verification_codes',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('verification_code_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('verification_code_id')
    )
    op.create_index(op.f('ix_verification_codes_verification_code_id'), 'verification_codes', ['verification_code_id'], unique=False)
    op.create_table('verification_codes_password_reset',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('verification_code_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('verification_code_id')
    )
    op.create_index(op.f('ix_verification_codes_password_reset_verification_code_id'), 'verification_codes_password_reset', ['verification_code_id'], unique=False)
    op.create_table('collection_routes',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('route_id', sa.Uuid(), nullable=False),
    sa.Column('employee_id', sa.Uuid(), nullable=False),
    sa.Column('loan_id', sa.Uuid(), nullable=False),
    sa.Column('assignment_date', sa.Date(), nullable=False),
    sa.Column('scheduled_date', sa.Date(), nullable=True),
    sa.Column('completed_date', sa.Date(), nullable=True),
    sa.Column('status', sa.Enum('assigned', 'in_progress', 'completed', 'cancelled', 'pending', name='collectionroutestatus'), nullable=False),
    sa.Column('priority', sa.Enum('low', 'normal', 'high', 'urgent', name='collectionpriority'), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('visit_attempts', sa.Integer(), nullable=False),
    sa.Column('contact_attempts', sa.Integer(), nullable=False),
    sa.Column('amount_collected', sa.Float(), nullable=True),
    sa.Column('collection_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('client_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('gps_coordinates', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['loan_id'], ['loans.loan_id'], ),
    sa.PrimaryKeyConstraint('route_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('collection_routes')
    op.drop_index(op.f('ix_verification_codes_password_reset_verification_code_id'), table_name='verification_codes_password_reset')
    op.drop_table('verification_codes_password_reset')
    op.drop_index(op.f('ix_verification_codes_verification_code_id'), table_name='verification_codes')
    op.drop_table('verification_codes')
    op.drop_table('reports')
    op.drop_table('payments')
    op.drop_table('loans')
    op.drop_table('files')
    op.drop_table('expenses')
    op.drop_table('daily_cutoff')
    op.drop_table('client_financial_history')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('suppliers')
    op.drop_table('clients')
    # ### end Alembic commands ###
